// This file was generated by stechec2-generator. DO NOT EDIT.

/**
 * Les 7 Geisha (2, 2, 2, 3, 3, 4, 5)
 */
declare const NB_GEISHA: number = 7;

/**
 * Le nombre total de cartes (2 + 2 + 2 + 3 + 3 + 4 + 5)
 */
declare const NB_CARTES_TOTALES: number = 21;

/**
 * Le nombre de cartes que chaque personne a au début
 */
declare const NB_CARTES_DEBUT: number = 6;

/**
 * Le nombre de cartes écartées au début du jeu
 */
declare const NB_CARTES_ECARTEES: number = 1;

/**
 * Le nombre total d'actions que chaque joueur devra faire
 */
declare const NB_ACTIONS: number = 4;

/**
 * Le nombre total de manches avant la fin de la partie
 */
declare const NB_MANCHES_MAX: number = 3;

/**
 * La valeur (et le nombre de cartes) de chaque Geisha séparée par des |
 */
declare const GEISHA_VALEUR: string = "2|2|2|3|3|4|5";

/**
 * Les actions de jeu
 */
declare enum Action {
    /**
     * Valide une unique carte
     */
    Valider = 0,
    /**
     * Défausse deux cartes
     */
    Defausser = 1,
    /**
     * Donne le choix entre trois cartes
     */
    ChoixTrois = 2,
    /**
     * Donne le choix entre deux paquets de deux cartes
     */
    ChoixPaquets = 3,
    /**
     * Aucune action n'a été jouée (utilisé dans tour_precedent)
     */
    PremierJoueur = 4,
}

/**
 * Enumeration contentant toutes les erreurs possibles
 */
declare enum Error {
    /**
     * pas d'erreur
     */
    Ok = 0,
    /**
     * l'action a déjà été jouée
     */
    ActionDejaJouee = 1,
    /**
     * vous ne pouvez pas jouer ces cartes
     */
    CartesInvalides = 2,
    /**
     * ce paquet n'existe pas
     */
    PaquetInvalide = 3,
    /**
     * cette Geisha n'existe pas (doit être un entier entre 0 et NB_GEISHA - 1)
     */
    GeishaInvalides = 4,
    /**
     * ce joueur n'existe pas
     */
    JoueurInvalide = 5,
    /**
     * vous ne pouvez pas répondre à ce choix
     */
    ChoixInvalide = 6,
    /**
     * vous ne pouvez pas jouer cette action maintenant
     */
    ActionInvalide = 7,
}

/**
 * Enumeration représentant les différents joueurs
 */
declare enum Joueur {
    /**
     * Le joueur 1
     */
    Joueur1 = 0,
    /**
     * Le joueur 2
     */
    Joueur2 = 1,
    /**
     * Égalité, utilisé uniquement dans possession_geisha
     */
    Egalite = 2,
}

/**
 * La description d'une action jouée
 */
declare interface ActionJouee {
    /**
     * L'action jouée
     */
    act: Action;
    /**
     * Si act==VALIDER ou act==DEFAUSSER, -1 sinon la première carte (du
     * premier paquet)
     */
    c1: number;
    /**
     * Si act==V|D: -1 sinon la deuxième carte (du premier paquet)
     */
    c2: number;
    /**
     * Si act==V|D: -1 sinon la troisième carte (ou la première carte du second
     * paquet si act==choix paquet)
     */
    c3: number;
    /**
     * Si act!=choix paquet: -1 sinon la deuxième carte du second paquet
     */
    c4: number;
}

/**
 * Renvoie l'identifiant du joueur
 */
declare function idJoueur(): Joueur;

/**
 * Renvoie l'identifiant de l'adversaire
 */
declare function idAdversaire(): Joueur;

/**
 * Renvoie le numéro de la manche (entre 0 et 2)
 */
declare function manche(): number;

/**
 * Renvoie le numéro du tour (entre 0 et 7)
 */
declare function tour(): number;

/**
 * Renvoie l'action jouée par l'adversaire
 */
declare function tourPrecedent(): ActionJouee;

/**
 * Renvoie le nombre de cartes validées par le joueur pour la Geisha (la carte
 * validée secrètement n'est pas prise en compte)
 * @param j - Le joueur
 * @param g - La Geisha
 */
declare function nbCartesValidees(j: Joueur, g: number): number;

/**
 * Renvoie qui possède la Geisha
 * @param g - La Geisha
 */
declare function possessionGeisha(g: number): Joueur;

/**
 * Renvoie si l'action a déjà été jouée par le joueur
 * @param j - Le joueur
 * @param a - L'action
 */
declare function estJoueeAction(j: Joueur, a: Action): boolean;

/**
 * Renvoie le nombre de cartes que le joueur a
 * @param j - Le joueur
 */
declare function nbCartes(j: Joueur): number;

/**
 * Renvoie les cartes que vous avez
 */
declare function cartesEnMain(): number[];

/**
 * Renvoie la carte que vous avez piochée au début du tour
 */
declare function cartePiochee(): number;

/**
 * Jouer l'action valider une carte
 * @param c - La carte à jouer
 */
declare function actionValider(c: number): Error;

/**
 * Jouer l'action défausser deux cartes
 * @param c1 - La première carte à défausser
 * @param c2 - La deuxième carte à défausser
 */
declare function actionDefausser(c1: number, c2: number): Error;

/**
 * Jouer l'action choisir entre trois cartes
 * @param c1 - La première carte à jouer
 * @param c2 - La deuxième carte à jouer
 * @param c3 - La troisième carte à jouer
 */
declare function actionChoixTrois(c1: number, c2: number, c3: number): Error;

/**
 * Jouer l'action choisir entre deux paquets de deux cartes
 * @param p1c1 - La première carte du premier paquet à jouer
 * @param p1c2 - La deuxième carte du premier paquet à jouer
 * @param p2c1 - La première carte du deuxième paquet à jouer
 * @param p2c2 - La deuxième carte du deuxième paquet à jouer
 */
declare function actionChoixPaquets(p1c1: number, p1c2: number, p2c1: number, p2c2: number): Error;

/**
 * Choisir une des trois cartes proposées.
 * @param c - Le numéro de la carte choisi (0, 1 ou 2)
 */
declare function repondreChoixTrois(c: number): Error;

/**
 * Choisir un des deux paquets proposés.
 * @param p - Le paquet choisi (0 ou 1)
 */
declare function repondreChoixPaquets(p: number): Error;

/**
 * Affiche le contenu d'une valeur de type action
 * @param v - The value to display
 */
declare function afficherAction(v: Action): void;

/**
 * Affiche le contenu d'une valeur de type error
 * @param v - The value to display
 */
declare function afficherError(v: Error): void;

/**
 * Affiche le contenu d'une valeur de type joueur
 * @param v - The value to display
 */
declare function afficherJoueur(v: Joueur): void;

/**
 * Affiche le contenu d'une valeur de type action_jouee
 * @param v - The value to display
 */
declare function afficherActionJouee(v: ActionJouee): void;

