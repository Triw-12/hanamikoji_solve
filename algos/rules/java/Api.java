// This file was generated by stechec2-generator. DO NOT EDIT.

/**
 * Les actions de jeu
 */
enum Action {
    /**
     * Valide une unique carte
     */
    VALIDER,
    /**
     * Défausse deux cartes
     */
    DEFAUSSER,
    /**
     * Donne le choix entre trois cartes
     */
    CHOIX_TROIS,
    /**
     * Donne le choix entre deux paquets de deux cartes
     */
    CHOIX_PAQUETS,
    /**
     * Aucune action n'a été jouée (utilisé dans tour_precedent)
     */
    PREMIER_JOUEUR,
}

/**
 * Enumeration contentant toutes les erreurs possibles
 */
enum Error {
    /**
     * pas d'erreur
     */
    OK,
    /**
     * l'action a déjà été jouée
     */
    ACTION_DEJA_JOUEE,
    /**
     * vous ne pouvez pas jouer ces cartes
     */
    CARTES_INVALIDES,
    /**
     * ce paquet n'existe pas
     */
    PAQUET_INVALIDE,
    /**
     * cette Geisha n'existe pas (doit être un entier entre 0 et NB_GEISHA - 1)
     */
    GEISHA_INVALIDES,
    /**
     * ce joueur n'existe pas
     */
    JOUEUR_INVALIDE,
    /**
     * vous ne pouvez pas répondre à ce choix
     */
    CHOIX_INVALIDE,
    /**
     * vous ne pouvez pas jouer cette action maintenant
     */
    ACTION_INVALIDE,
}

/**
 * Enumeration représentant les différents joueurs
 */
enum Joueur {
    /**
     * Le joueur 1
     */
    JOUEUR_1,
    /**
     * Le joueur 2
     */
    JOUEUR_2,
    /**
     * Égalité, utilisé uniquement dans possession_geisha
     */
    EGALITE,
}

/**
 * La description d'une action jouée
 */
class ActionJouee {
    /**
     * L'action jouée
     */
    public Action act;
    /**
     * Si act==VALIDER ou act==DEFAUSSER, -1 sinon la première carte (du
     * premier paquet)
     */
    public int c1;
    /**
     * Si act==V|D: -1 sinon la deuxième carte (du premier paquet)
     */
    public int c2;
    /**
     * Si act==V|D: -1 sinon la troisième carte (ou la première carte du second
     * paquet si act==choix paquet)
     */
    public int c3;
    /**
     * Si act!=choix paquet: -1 sinon la deuxième carte du second paquet
     */
    public int c4;
}

public class Api
{
    /**
     * Les 7 Geisha (2, 2, 2, 3, 3, 4, 5)
     */
    public static final int NB_GEISHA = 7;

    /**
     * Le nombre total de cartes (2 + 2 + 2 + 3 + 3 + 4 + 5)
     */
    public static final int NB_CARTES_TOTALES = 21;

    /**
     * Le nombre de cartes que chaque personne a au début
     */
    public static final int NB_CARTES_DEBUT = 6;

    /**
     * Le nombre de cartes écartées au début du jeu
     */
    public static final int NB_CARTES_ECARTEES = 1;

    /**
     * Le nombre total d'actions que chaque joueur devra faire
     */
    public static final int NB_ACTIONS = 4;

    /**
     * Le nombre total de manches avant la fin de la partie
     */
    public static final int NB_MANCHES_MAX = 3;

    /**
     * La valeur (et le nombre de cartes) de chaque Geisha séparée par des |
     */
    public static final String GEISHA_VALEUR = "2|2|2|3|3|4|5";

    /**
     * Renvoie l'identifiant du joueur
     */
    public static native Joueur id_joueur();

    /**
     * Renvoie l'identifiant de l'adversaire
     */
    public static native Joueur id_adversaire();

    /**
     * Renvoie le numéro de la manche (entre 0 et 2)
     */
    public static native int manche();

    /**
     * Renvoie le numéro du tour (entre 0 et 7)
     */
    public static native int tour();

    /**
     * Renvoie l'action jouée par l'adversaire
     */
    public static native ActionJouee tour_precedent();

    /**
     * Renvoie le nombre de cartes validées par le joueur pour la Geisha (la
     * carte validée secrètement n'est pas prise en compte)
     */
    public static native int nb_cartes_validees(Joueur j, int g);

    /**
     * Renvoie qui possède la Geisha
     */
    public static native Joueur possession_geisha(int g);

    /**
     * Renvoie si l'action a déjà été jouée par le joueur
     */
    public static native boolean est_jouee_action(Joueur j, Action a);

    /**
     * Renvoie le nombre de cartes que le joueur a
     */
    public static native int nb_cartes(Joueur j);

    /**
     * Renvoie les cartes que vous avez
     */
    public static native int[] cartes_en_main();

    /**
     * Renvoie la carte que vous avez piochée au début du tour
     */
    public static native int carte_piochee();

    /**
     * Jouer l'action valider une carte
     */
    public static native Error action_valider(int c);

    /**
     * Jouer l'action défausser deux cartes
     */
    public static native Error action_defausser(int c1, int c2);

    /**
     * Jouer l'action choisir entre trois cartes
     */
    public static native Error action_choix_trois(int c1, int c2, int c3);

    /**
     * Jouer l'action choisir entre deux paquets de deux cartes
     */
    public static native Error action_choix_paquets(int p1c1, int p1c2, int p2c1, int p2c2);

    /**
     * Choisir une des trois cartes proposées.
     */
    public static native Error repondre_choix_trois(int c);

    /**
     * Choisir un des deux paquets proposés.
     */
    public static native Error repondre_choix_paquets(int p);

    /**
     * Affiche le contenu d'une valeur de type action
     */
    public static native void afficher_action(Action v);

    /**
     * Affiche le contenu d'une valeur de type error
     */
    public static native void afficher_error(Error v);

    /**
     * Affiche le contenu d'une valeur de type joueur
     */
    public static native void afficher_joueur(Joueur v);

    /**
     * Affiche le contenu d'une valeur de type action_jouee
     */
    public static native void afficher_action_jouee(ActionJouee v);
}
